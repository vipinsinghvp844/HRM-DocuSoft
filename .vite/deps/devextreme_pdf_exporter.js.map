{
  "version": 3,
  "sources": ["../../node_modules/devextreme/esm/exporter/jspdf/common/normalizeOptions.js", "../../node_modules/devextreme/esm/exporter/jspdf/common/pdf_utils.js", "../../node_modules/devextreme/esm/exporter/jspdf/common/row_utils.js", "../../node_modules/devextreme/esm/exporter/jspdf/common/height_updater.js", "../../node_modules/devextreme/esm/exporter/jspdf/common/rows_generator.js", "../../node_modules/devextreme/esm/exporter/jspdf/common/draw_utils.js", "../../node_modules/devextreme/esm/exporter/jspdf/common/rows_spliting_utils/get_multipage_row_pages.js", "../../node_modules/devextreme/esm/exporter/jspdf/common/rows_spliting_utils/create_on_split_multipage_row.js", "../../node_modules/devextreme/esm/exporter/jspdf/common/rows_splitting.js", "../../node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js", "../../node_modules/devextreme/esm/exporter/common/export_load_panel.js", "../../node_modules/devextreme/esm/exporter/jspdf/common/export.js", "../../node_modules/devextreme/esm/exporter/jspdf/export_data_grid.js", "../../node_modules/devextreme/esm/exporter/jspdf/autotable/export.js", "../../node_modules/devextreme/esm/exporter/jspdf/autotable/export_data_grid.js", "../../node_modules/devextreme/esm/exporter/jspdf/export_gantt.js"],
  "sourcesContent": ["/**\r\n * DevExtreme (esm/exporter/jspdf/common/normalizeOptions.js)\r\n * Version: 23.2.14\r\n * Build date: Wed Sep 10 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isNumeric\r\n} from \"../../../core/utils/type\";\r\n\r\nfunction normalizeBoundaryValue(value) {\r\n    var _value$top, _value$right, _value$bottom, _value$left;\r\n    if (isNumeric(value)) {\r\n        return {\r\n            top: value,\r\n            right: value,\r\n            bottom: value,\r\n            left: value\r\n        }\r\n    }\r\n    return {\r\n        top: null !== (_value$top = null === value || void 0 === value ? void 0 : value.top) && void 0 !== _value$top ? _value$top : 0,\r\n        right: null !== (_value$right = null === value || void 0 === value ? void 0 : value.right) && void 0 !== _value$right ? _value$right : 0,\r\n        bottom: null !== (_value$bottom = null === value || void 0 === value ? void 0 : value.bottom) && void 0 !== _value$bottom ? _value$bottom : 0,\r\n        left: null !== (_value$left = null === value || void 0 === value ? void 0 : value.left) && void 0 !== _value$left ? _value$left : 0\r\n    }\r\n}\r\n\r\nfunction normalizeRowsInfo(rowsInfo) {\r\n    rowsInfo.forEach(row => {\r\n        row.cells.forEach(_ref => {\r\n            var {\r\n                pdfCell: pdfCell\r\n            } = _ref;\r\n            pdfCell.padding = normalizeBoundaryValue(pdfCell.padding)\r\n        })\r\n    })\r\n}\r\nexport {\r\n    normalizeRowsInfo,\r\n    normalizeBoundaryValue\r\n};\r\n", "/**\r\n * DevExtreme (esm/exporter/jspdf/common/pdf_utils.js)\r\n * Version: 23.2.14\r\n * Build date: Wed Sep 10 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isDefined\r\n} from \"../../../core/utils/type\";\r\nvar DOTS_TEXT = \"...\";\r\n\r\nfunction toPdfUnit(doc, value) {\r\n    var coefficient = 1 / doc.internal.scaleFactor;\r\n    return value * coefficient\r\n}\r\n\r\nfunction getPageWidth(doc) {\r\n    return doc.internal.pageSize.getWidth()\r\n}\r\n\r\nfunction getPageHeight(doc) {\r\n    return doc.internal.pageSize.getHeight()\r\n}\r\n\r\nfunction getTextLines(doc, text, font, _ref) {\r\n    var {\r\n        wordWrapEnabled: wordWrapEnabled,\r\n        targetRectWidth: targetRectWidth\r\n    } = _ref;\r\n    if (wordWrapEnabled) {\r\n        var usedFont = doc.getFont(null === font || void 0 === font ? void 0 : font.name, null === font || void 0 === font ? void 0 : font.style);\r\n        return doc.splitTextToSize(text, targetRectWidth, {\r\n            fontSize: (null === font || void 0 === font ? void 0 : font.size) || doc.getFontSize(),\r\n            fontName: usedFont.fontName,\r\n            fontStyle: usedFont.fontStyle\r\n        })\r\n    }\r\n    var textWithoutLineBreak = text.split(\"\\n\").filter(ch => \"\" !== ch).join(\" \");\r\n    if (getTextDimensions(doc, textWithoutLineBreak, font).w <= targetRectWidth) {\r\n        return [textWithoutLineBreak]\r\n    }\r\n    var textWidth = getTextDimensions(doc, textWithoutLineBreak + DOTS_TEXT, font).w;\r\n    while (textWithoutLineBreak.length > 0 && textWidth > targetRectWidth) {\r\n        var symbolsCountToRemove = 0;\r\n        if (textWidth >= 2 * targetRectWidth) {\r\n            symbolsCountToRemove = textWithoutLineBreak.length / 2\r\n        }\r\n        if (symbolsCountToRemove < 1) {\r\n            symbolsCountToRemove = 1\r\n        }\r\n        textWithoutLineBreak = textWithoutLineBreak.substring(0, textWithoutLineBreak.length - symbolsCountToRemove);\r\n        textWidth = getTextDimensions(doc, textWithoutLineBreak + DOTS_TEXT, font).w\r\n    }\r\n    return [textWithoutLineBreak + DOTS_TEXT]\r\n}\r\n\r\nfunction calculateTargetRectWidth(columnWidth, padding) {\r\n    var width = columnWidth - (padding.left + padding.right);\r\n    return width >= 0 ? width : 0\r\n}\r\n\r\nfunction getTextDimensions(doc, text, font) {\r\n    return doc.getTextDimensions(text, {\r\n        font: doc.getFont(null === font || void 0 === font ? void 0 : font.name, null === font || void 0 === font ? void 0 : font.style),\r\n        fontSize: (null === font || void 0 === font ? void 0 : font.size) || doc.getFontSize()\r\n    })\r\n}\r\n\r\nfunction calculateTextHeight(doc, text, font, _ref2) {\r\n    var {\r\n        wordWrapEnabled: wordWrapEnabled,\r\n        targetRectWidth: targetRectWidth\r\n    } = _ref2;\r\n    var heightOfOneLine = getTextDimensions(doc, text, font).h;\r\n    var linesCount = getTextLines(doc, text, font, {\r\n        wordWrapEnabled: wordWrapEnabled,\r\n        targetRectWidth: targetRectWidth\r\n    }).length;\r\n    return heightOfOneLine * linesCount * doc.getLineHeightFactor()\r\n}\r\n\r\nfunction calculateRowHeight(doc, cells, columnWidths) {\r\n    if (cells.length !== columnWidths.length) {\r\n        throw \"the cells count must be equal to the count of the columns\"\r\n    }\r\n    var rowHeight = 0;\r\n    for (var cellIndex = 0; cellIndex < cells.length; cellIndex++) {\r\n        if (isDefined(cells[cellIndex].rowSpan)) {\r\n            continue\r\n        }\r\n        var cellText = cells[cellIndex].pdfCell.text;\r\n        var cellPadding = cells[cellIndex].pdfCell.padding;\r\n        var font = cells[cellIndex].pdfCell.font;\r\n        var wordWrapEnabled = cells[cellIndex].pdfCell.wordWrapEnabled;\r\n        var columnWidth = columnWidths[cellIndex];\r\n        var targetRectWidth = calculateTargetRectWidth(columnWidth, cellPadding);\r\n        if (isDefined(cellText)) {\r\n            var textHeight = \"\" !== cellText ? calculateTextHeight(doc, cellText, font, {\r\n                wordWrapEnabled: wordWrapEnabled,\r\n                targetRectWidth: targetRectWidth\r\n            }) : 0;\r\n            var cellHeight = textHeight + cellPadding.top + cellPadding.bottom;\r\n            if (rowHeight < cellHeight) {\r\n                rowHeight = cellHeight\r\n            }\r\n        }\r\n    }\r\n    return rowHeight\r\n}\r\n\r\nfunction applyWordWrap(doc, rowsInfo) {\r\n    rowsInfo.forEach(row => {\r\n        row.cells.forEach(_ref3 => {\r\n            var {\r\n                pdfCell: pdfCell\r\n            } = _ref3;\r\n            if (isDefined(pdfCell.text)) {\r\n                var lines = getTextLines(doc, pdfCell.text, pdfCell.font, {\r\n                    wordWrapEnabled: pdfCell.wordWrapEnabled,\r\n                    targetRectWidth: calculateTargetRectWidth(pdfCell._rect.w, pdfCell.padding)\r\n                });\r\n                pdfCell.text = lines.join(\"\\n\")\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nfunction applyRtl(doc, rectsByPages, options) {\r\n    rectsByPages.forEach(pageRects => {\r\n        pageRects.forEach(pdfCell => {\r\n            var mirroredX = getPageWidth(doc) - (pdfCell._rect.x + pdfCell._rect.w);\r\n            var marginDiff = options.margin.left - options.margin.right;\r\n            pdfCell._rect.x = mirroredX + marginDiff\r\n        })\r\n    })\r\n}\r\nexport {\r\n    calculateRowHeight,\r\n    calculateTextHeight,\r\n    calculateTargetRectWidth,\r\n    getTextDimensions,\r\n    getTextLines,\r\n    getPageWidth,\r\n    getPageHeight,\r\n    applyWordWrap,\r\n    toPdfUnit,\r\n    applyRtl\r\n};\r\n", "/**\r\n * DevExtreme (esm/exporter/jspdf/common/row_utils.js)\r\n * Version: 23.2.14\r\n * Build date: Wed Sep 10 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isDefined,\r\n    isNumeric\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    calculateRowHeight,\r\n    getPageWidth,\r\n    toPdfUnit\r\n} from \"./pdf_utils\";\r\nvar getSum = (a, b) => a + b;\r\n\r\nfunction calculateColumnWidths(doc, dataProvider, topLeftX, margin, customerColumnWidths) {\r\n    var resultWidths = dataProvider.getColumnsWidths().map(width => toPdfUnit(doc, null !== width && void 0 !== width ? width : 150));\r\n    var totalAutoColumnsWidth = resultWidths.filter((width, index) => !isDefined(customerColumnWidths[index])).reduce(getSum, 0);\r\n    var totalCustomerColumnsWidth = customerColumnWidths.filter(width => isNumeric(width)).reduce(getSum, 0);\r\n    var availablePageWidth = getAvailablePageAreaWidth(doc, topLeftX, margin);\r\n    var ratio = totalCustomerColumnsWidth < availablePageWidth ? (availablePageWidth - totalCustomerColumnsWidth) / totalAutoColumnsWidth : 1;\r\n    return resultWidths.map((width, index) => {\r\n        var _customerColumnWidths;\r\n        return null !== (_customerColumnWidths = customerColumnWidths[index]) && void 0 !== _customerColumnWidths ? _customerColumnWidths : width * ratio\r\n    })\r\n}\r\n\r\nfunction getAvailablePageAreaWidth(doc, topLeftX, margin) {\r\n    return getPageWidth(doc) - topLeftX - margin.left - margin.right\r\n}\r\n\r\nfunction initializeCellsWidth(doc, dataProvider, rows, options) {\r\n    var columnWidths = calculateColumnWidths(doc, dataProvider, options.topLeft.x, options.margin, options.columnWidths);\r\n    rows.forEach(row => {\r\n        row.cells.forEach((_ref, index) => {\r\n            var {\r\n                gridCell: gridCell,\r\n                pdfCell: pdfCell\r\n            } = _ref;\r\n            pdfCell._rect.w = columnWidths[index]\r\n        })\r\n    })\r\n}\r\n\r\nfunction calculateHeights(doc, rows, options) {\r\n    rows.forEach(row => {\r\n        var pdfCells = row.cells.map(c => c.pdfCell);\r\n        var customerHeight;\r\n        if (options.onRowExporting) {\r\n            var args = {\r\n                rowCells: pdfCells\r\n            };\r\n            options.onRowExporting(args);\r\n            if (isDefined(args.rowHeight)) {\r\n                customerHeight = args.rowHeight\r\n            }\r\n        }\r\n        row.height = isDefined(customerHeight) ? customerHeight : calculateRowHeight(doc, row.cells, pdfCells.map(c => c._rect.w));\r\n        pdfCells.forEach(cell => {\r\n            cell._rect.h = row.height\r\n        })\r\n    })\r\n}\r\n\r\nfunction applyColSpans(rows) {\r\n    for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {\r\n        var row = rows[rowIndex];\r\n        for (var cellIndex = 0; cellIndex < row.cells.length; cellIndex++) {\r\n            var cell = row.cells[cellIndex];\r\n            if (isDefined(cell.colSpan) && !isDefined(cell.pdfCell.isMerged)) {\r\n                for (var spanIndex = 1; spanIndex <= cell.colSpan; spanIndex++) {\r\n                    var mergedCell = rows[rowIndex].cells[cellIndex + spanIndex];\r\n                    cell.pdfCell._rect.w += mergedCell.pdfCell._rect.w;\r\n                    mergedCell.pdfCell._rect.w = 0;\r\n                    mergedCell.pdfCell.isMerged = true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction applyRowSpans(rows) {\r\n    for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {\r\n        var row = rows[rowIndex];\r\n        for (var cellIndex = 0; cellIndex < row.cells.length; cellIndex++) {\r\n            var cell = row.cells[cellIndex];\r\n            if (isDefined(cell.rowSpan) && !isDefined(cell.pdfCell.isMerged)) {\r\n                for (var spanIndex = 1; spanIndex <= cell.rowSpan; spanIndex++) {\r\n                    var mergedCell = rows[rowIndex + spanIndex].cells[cellIndex];\r\n                    cell.pdfCell._rect.h += mergedCell.pdfCell._rect.h;\r\n                    mergedCell.pdfCell._rect.h = 0;\r\n                    mergedCell.pdfCell.isMerged = true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction resizeFirstColumnByIndentLevel(rows, options) {\r\n    rows.forEach(row => {\r\n        row.cells[0].pdfCell._rect.w -= row.indentLevel * options.indent\r\n    })\r\n}\r\n\r\nfunction applyBordersConfig(rows) {\r\n    for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {\r\n        var cells = rows[rowIndex].cells;\r\n        for (var columnIndex = 0; columnIndex < cells.length; columnIndex++) {\r\n            var pdfCell = cells[columnIndex].pdfCell;\r\n            var leftPdfCell = columnIndex >= 1 ? cells[columnIndex - 1].pdfCell : null;\r\n            var topPdfCell = rowIndex >= 1 ? rows[rowIndex - 1].cells[columnIndex].pdfCell : null;\r\n            if (false === pdfCell.drawLeftBorder && !isDefined(cells[columnIndex].colSpan)) {\r\n                if (isDefined(leftPdfCell)) {\r\n                    leftPdfCell.drawRightBorder = false\r\n                }\r\n            } else if (!isDefined(pdfCell.drawLeftBorder)) {\r\n                if (isDefined(leftPdfCell) && false === leftPdfCell.drawRightBorder) {\r\n                    pdfCell.drawLeftBorder = false\r\n                }\r\n            }\r\n            if (false === pdfCell.drawTopBorder) {\r\n                if (isDefined(topPdfCell)) {\r\n                    topPdfCell.drawBottomBorder = false\r\n                }\r\n            } else if (!isDefined(pdfCell.drawTopBorder)) {\r\n                if (isDefined(topPdfCell) && false === topPdfCell.drawBottomBorder) {\r\n                    pdfCell.drawTopBorder = false\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction calculateCoordinates(doc, rows, options) {\r\n    var _topLeft$y;\r\n    var topLeft = null === options || void 0 === options ? void 0 : options.topLeft;\r\n    var margin = null === options || void 0 === options ? void 0 : options.margin;\r\n    var y = (null !== (_topLeft$y = null === topLeft || void 0 === topLeft ? void 0 : topLeft.y) && void 0 !== _topLeft$y ? _topLeft$y : 0) + margin.top;\r\n    rows.forEach(row => {\r\n        var _topLeft$x;\r\n        var x = (null !== (_topLeft$x = null === topLeft || void 0 === topLeft ? void 0 : topLeft.x) && void 0 !== _topLeft$x ? _topLeft$x : 0) + margin.left;\r\n        var intend = row.indentLevel * options.indent;\r\n        row.cells.forEach(cell => {\r\n            cell.pdfCell._rect.x = x + intend;\r\n            cell.pdfCell._rect.y = y;\r\n            x += cell.pdfCell._rect.w\r\n        });\r\n        y += row.height\r\n    })\r\n}\r\n\r\nfunction calculateTableSize(doc, cells, options) {\r\n    var _ref2, _leftPos, _options$topLeft, _ref3, _topPos, _options$topLeft2;\r\n    var leftPos;\r\n    var topPos;\r\n    var rightPos;\r\n    var bottomPos;\r\n    cells.forEach(cell => {\r\n        if (!isDefined(leftPos) || leftPos > cell._rect.x) {\r\n            leftPos = cell._rect.x\r\n        }\r\n        if (!isDefined(topPos) || topPos > cell._rect.y) {\r\n            topPos = cell._rect.y\r\n        }\r\n        if (!isDefined(rightPos) || rightPos < cell._rect.x + cell._rect.w) {\r\n            rightPos = cell._rect.x + cell._rect.w\r\n        }\r\n        if (!isDefined(bottomPos) || bottomPos < cell._rect.y + cell._rect.h) {\r\n            bottomPos = cell._rect.y + cell._rect.h\r\n        }\r\n    });\r\n    var x = null !== (_ref2 = null !== (_leftPos = leftPos) && void 0 !== _leftPos ? _leftPos : null === options || void 0 === options ? void 0 : null === (_options$topLeft = options.topLeft) || void 0 === _options$topLeft ? void 0 : _options$topLeft.x) && void 0 !== _ref2 ? _ref2 : 0;\r\n    var y = null !== (_ref3 = null !== (_topPos = topPos) && void 0 !== _topPos ? _topPos : null === options || void 0 === options ? void 0 : null === (_options$topLeft2 = options.topLeft) || void 0 === _options$topLeft2 ? void 0 : _options$topLeft2.y) && void 0 !== _ref3 ? _ref3 : 0;\r\n    var w = isDefined(rightPos) ? rightPos - x : 0;\r\n    var h = isDefined(bottomPos) ? bottomPos - y : 0;\r\n    return {\r\n        x: x,\r\n        y: y,\r\n        w: w,\r\n        h: h\r\n    }\r\n}\r\nexport {\r\n    initializeCellsWidth,\r\n    applyColSpans,\r\n    applyRowSpans,\r\n    resizeFirstColumnByIndentLevel,\r\n    applyBordersConfig,\r\n    calculateHeights,\r\n    calculateCoordinates,\r\n    calculateTableSize\r\n};\r\n", "/**\r\n * DevExtreme (esm/exporter/jspdf/common/height_updater.js)\r\n * Version: 23.2.14\r\n * Build date: Wed Sep 10 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isDefined\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    calculateTextHeight,\r\n    calculateTargetRectWidth\r\n} from \"./pdf_utils\";\r\n\r\nfunction updateRowsAndCellsHeights(doc, rows) {\r\n    var rowsAdditionalHeights = calculateAdditionalRowsHeights(doc, rows);\r\n    rows.forEach(row => {\r\n        row.height += rowsAdditionalHeights[row.rowIndex]\r\n    });\r\n    rows.forEach(row => {\r\n        row.cells.forEach(cell => {\r\n            var _cell$rowSpan;\r\n            var rowsCount = (null !== (_cell$rowSpan = cell.rowSpan) && void 0 !== _cell$rowSpan ? _cell$rowSpan : 0) + 1;\r\n            cell.pdfCell._rect.h = rows.slice(row.rowIndex, row.rowIndex + rowsCount).reduce((accumulator, rowInfo) => accumulator + rowInfo.height, 0)\r\n        })\r\n    })\r\n}\r\n\r\nfunction calculateAdditionalRowsHeights(doc, rows) {\r\n    var rowsAdditionalHeights = Array.from({\r\n        length: rows.length\r\n    }, () => 0);\r\n    var sortedRows = sortRowsByMaxRowSpanAsc(rows);\r\n    sortedRows.forEach(row => {\r\n        var cellsWithRowSpan = row.cells.filter(cell => isDefined(cell.rowSpan));\r\n        cellsWithRowSpan.forEach(cell => {\r\n            var targetRectWidth = calculateTargetRectWidth(cell.pdfCell._rect.w, cell.pdfCell.padding);\r\n            var textHeight = calculateTextHeight(doc, cell.pdfCell.text, cell.pdfCell.font, {\r\n                wordWrapEnabled: cell.pdfCell.wordWrapEnabled,\r\n                targetRectWidth: targetRectWidth\r\n            });\r\n            var cellHeight = textHeight + cell.pdfCell.padding.top + cell.pdfCell.padding.bottom;\r\n            var rowsCount = cell.rowSpan + 1;\r\n            var currentRowSpanRowsHeight = rows.slice(row.rowIndex, row.rowIndex + rowsCount).reduce((accumulator, rowInfo) => accumulator + rowInfo.height + rowsAdditionalHeights[rowInfo.rowIndex], 0);\r\n            if (cellHeight > currentRowSpanRowsHeight) {\r\n                var delta = (cellHeight - currentRowSpanRowsHeight) / rowsCount;\r\n                for (var spanIndex = row.rowIndex; spanIndex < row.rowIndex + rowsCount; spanIndex++) {\r\n                    rowsAdditionalHeights[spanIndex] += delta\r\n                }\r\n            }\r\n        })\r\n    });\r\n    return rowsAdditionalHeights\r\n}\r\n\r\nfunction sortRowsByMaxRowSpanAsc(rows) {\r\n    var getMaxRowSpan = row => {\r\n        var spansArray = row.cells.map(cell => {\r\n            var _cell$rowSpan2;\r\n            return null !== (_cell$rowSpan2 = cell.rowSpan) && void 0 !== _cell$rowSpan2 ? _cell$rowSpan2 : 0\r\n        });\r\n        return Math.max(...spansArray)\r\n    };\r\n    return [...rows].sort((row1, row2) => {\r\n        var row1RowSpan = getMaxRowSpan(row1);\r\n        var row2RowSpan = getMaxRowSpan(row2);\r\n        if (row1RowSpan > row2RowSpan) {\r\n            return 1\r\n        }\r\n        if (row2RowSpan > row1RowSpan) {\r\n            return -1\r\n        }\r\n        return 0\r\n    })\r\n}\r\nexport {\r\n    updateRowsAndCellsHeights\r\n};\r\n", "/**\r\n * DevExtreme (esm/exporter/jspdf/common/rows_generator.js)\r\n * Version: 23.2.14\r\n * Build date: Wed Sep 10 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    isDate,\r\n    isDefined,\r\n    isNumeric\r\n} from \"../../../core/utils/type\";\r\nimport dateLocalization from \"../../../localization/date\";\r\nimport numberLocalization from \"../../../localization/number\";\r\nimport {\r\n    toPdfUnit\r\n} from \"./pdf_utils\";\r\nvar defaultStyles = {\r\n    base: {\r\n        font: {\r\n            size: 10\r\n        },\r\n        borderWidth: .5,\r\n        borderColor: \"#979797\"\r\n    },\r\n    header: {\r\n        textColor: \"#979797\"\r\n    },\r\n    group: {},\r\n    data: {},\r\n    groupFooter: {},\r\n    totalFooter: {}\r\n};\r\n\r\nfunction generateRowsInfo(doc, dataProvider, dataGrid, headerBackgroundColor) {\r\n    var result = [];\r\n    var rowsCount = dataProvider.getRowsCount();\r\n    var wordWrapEnabled = !!dataGrid.option(\"wordWrapEnabled\");\r\n    var rtlEnabled = !!dataGrid.option(\"rtlEnabled\");\r\n    var columns = dataProvider.getColumns();\r\n    var styles = dataProvider.getStyles();\r\n    for (var rowIndex = 0; rowIndex < rowsCount; rowIndex++) {\r\n        var rowType = dataProvider.getCellData(rowIndex, 0, true).cellSourceData.rowType;\r\n        var indentLevel = \"header\" !== rowType ? dataProvider.getGroupLevel(rowIndex) : 0;\r\n        var previousRow = result[rowIndex - 1];\r\n        if (\"groupFooter\" === rowType && \"groupFooter\" === (null === previousRow || void 0 === previousRow ? void 0 : previousRow.rowType)) {\r\n            indentLevel = previousRow.indentLevel - 1\r\n        }\r\n        result.push({\r\n            rowType: rowType,\r\n            indentLevel: indentLevel,\r\n            cells: generateRowCells({\r\n                doc: doc,\r\n                dataProvider: dataProvider,\r\n                rowIndex: rowIndex,\r\n                wordWrapEnabled: wordWrapEnabled,\r\n                columns: columns,\r\n                styles: styles,\r\n                rowType: rowType,\r\n                backgroundColor: \"header\" === rowType ? headerBackgroundColor : void 0,\r\n                rtlEnabled: rtlEnabled\r\n            }),\r\n            rowIndex: rowIndex\r\n        })\r\n    }\r\n    return result\r\n}\r\n\r\nfunction generateRowCells(_ref) {\r\n    var {\r\n        doc: doc,\r\n        dataProvider: dataProvider,\r\n        rowIndex: rowIndex,\r\n        wordWrapEnabled: wordWrapEnabled,\r\n        columns: columns,\r\n        styles: styles,\r\n        rowType: rowType,\r\n        backgroundColor: backgroundColor,\r\n        rtlEnabled: rtlEnabled\r\n    } = _ref;\r\n    var result = [];\r\n    for (var cellIndex = 0; cellIndex < columns.length; cellIndex++) {\r\n        var _style$alignment;\r\n        var cellData = dataProvider.getCellData(rowIndex, cellIndex, true);\r\n        var cellStyle = styles[dataProvider.getStyleId(rowIndex, cellIndex)];\r\n        var style = getPdfCellStyle(columns[cellIndex], rowType, cellStyle);\r\n        var defaultAlignment = rtlEnabled ? \"right\" : \"left\";\r\n        var paddingValue = toPdfUnit(doc, 5);\r\n        var pdfCell = {\r\n            text: getFormattedValue(cellData.value, cellStyle.format),\r\n            verticalAlign: \"middle\",\r\n            horizontalAlign: null !== (_style$alignment = style.alignment) && void 0 !== _style$alignment ? _style$alignment : defaultAlignment,\r\n            wordWrapEnabled: wordWrapEnabled,\r\n            backgroundColor: backgroundColor,\r\n            padding: {\r\n                top: paddingValue,\r\n                right: paddingValue,\r\n                bottom: paddingValue,\r\n                left: paddingValue\r\n            },\r\n            _rect: {},\r\n            _internalTextOptions: {}\r\n        };\r\n        if (rtlEnabled) {\r\n            pdfCell._internalTextOptions.isInputVisual = false;\r\n            pdfCell._internalTextOptions.isOutputVisual = true;\r\n            pdfCell._internalTextOptions.isInputRtl = true;\r\n            pdfCell._internalTextOptions.isOutputRtl = false\r\n        }\r\n        var cellInfo = {\r\n            gridCell: cellData.cellSourceData,\r\n            pdfCell: _extends({}, pdfCell, style)\r\n        };\r\n        if (\"header\" === rowType) {\r\n            var cellMerging = dataProvider.getCellMerging(rowIndex, cellIndex);\r\n            if (cellMerging && cellMerging.rowspan > 0) {\r\n                cellInfo.rowSpan = cellMerging.rowspan\r\n            }\r\n            if (cellMerging && cellMerging.colspan > 0) {\r\n                cellInfo.colSpan = cellMerging.colspan\r\n            }\r\n        } else if (\"group\" === rowType) {\r\n            var drawLeftBorderField = rtlEnabled ? \"drawRightBorder\" : \"drawLeftBorder\";\r\n            var drawRightBorderField = rtlEnabled ? \"drawLeftBorder\" : \"drawRightBorder\";\r\n            cellInfo.pdfCell[drawLeftBorderField] = 0 === cellIndex;\r\n            cellInfo.pdfCell[drawRightBorderField] = cellIndex === columns.length - 1;\r\n            if (cellIndex > 0) {\r\n                var isEmptyCellsExceptFirst = result.slice(1).reduce((accumulate, cellInfo) => accumulate && !isDefined(cellInfo.pdfCell.text), true);\r\n                if (!isDefined(cellInfo.pdfCell.text) && isEmptyCellsExceptFirst) {\r\n                    result[0].pdfCell[drawRightBorderField] = true;\r\n                    for (var i = 0; i < result.length; i++) {\r\n                        result[i].colSpan = result.length\r\n                    }\r\n                    cellInfo.colSpan = result.length\r\n                }\r\n            }\r\n        }\r\n        result.push(cellInfo)\r\n    }\r\n    return result\r\n}\r\n\r\nfunction getBaseTableStyle() {\r\n    return defaultStyles.base\r\n}\r\n\r\nfunction getPdfCellStyle(column, rowType, cellStyle) {\r\n    var styles = _extends({}, defaultStyles.base, defaultStyles[rowType]);\r\n    var alignment = \"header\" === rowType ? column.alignment : cellStyle.alignment;\r\n    if (alignment) {\r\n        styles.alignment = alignment\r\n    }\r\n    if (cellStyle.bold && \"header\" !== rowType) {\r\n        styles.font = _extends({}, styles.font, {\r\n            style: \"bold\"\r\n        })\r\n    }\r\n    return styles\r\n}\r\n\r\nfunction getFormattedValue(value, format) {\r\n    if (isDefined(format)) {\r\n        if (isDate(value)) {\r\n            return dateLocalization.format(value, format)\r\n        }\r\n        if (isNumeric(value)) {\r\n            return numberLocalization.format(value, format)\r\n        }\r\n    }\r\n    return null === value || void 0 === value ? void 0 : value.toString()\r\n}\r\nexport {\r\n    generateRowsInfo,\r\n    getBaseTableStyle\r\n};\r\n", "/**\r\n * DevExtreme (esm/exporter/jspdf/common/draw_utils.js)\r\n * Version: 23.2.14\r\n * Build date: Wed Sep 10 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nvar _excluded = [\"_rect\", \"gridCell\"];\r\nimport {\r\n    isDefined\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    calculateTextHeight,\r\n    toPdfUnit\r\n} from \"./pdf_utils\";\r\n\r\nfunction capitalizeFirstLetter(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1)\r\n}\r\n\r\nfunction roundToThreeDecimals(value) {\r\n    return Math.round(1e3 * value) / 1e3\r\n}\r\n\r\nfunction drawCellsContent(doc, customDrawCell, cellsArray, docStyles) {\r\n    cellsArray.forEach(cell => {\r\n        var {\r\n            _rect: _rect,\r\n            gridCell: gridCell\r\n        } = cell, pdfCell = _objectWithoutPropertiesLoose(cell, _excluded);\r\n        var {\r\n            x: x,\r\n            y: y,\r\n            w: w,\r\n            h: h\r\n        } = _rect;\r\n        var rect = {\r\n            x: x,\r\n            y: y,\r\n            w: w,\r\n            h: h\r\n        };\r\n        var eventArg = {\r\n            doc: doc,\r\n            rect: rect,\r\n            pdfCell: pdfCell,\r\n            gridCell: gridCell,\r\n            cancel: false\r\n        };\r\n        null === customDrawCell || void 0 === customDrawCell ? void 0 : customDrawCell(eventArg);\r\n        if (!eventArg.cancel) {\r\n            drawCellBackground(doc, cell);\r\n            drawCellText(doc, cell, docStyles)\r\n        }\r\n    })\r\n}\r\n\r\nfunction drawLine(doc, startX, startY, endX, endY) {\r\n    doc.line(roundToThreeDecimals(startX), roundToThreeDecimals(startY), roundToThreeDecimals(endX), roundToThreeDecimals(endY))\r\n}\r\n\r\nfunction drawRect(doc, x, y, width, height, style) {\r\n    if (isDefined(style)) {\r\n        doc.rect(roundToThreeDecimals(x), roundToThreeDecimals(y), roundToThreeDecimals(width), roundToThreeDecimals(height), style)\r\n    } else {\r\n        doc.rect(roundToThreeDecimals(x), roundToThreeDecimals(y), roundToThreeDecimals(width), roundToThreeDecimals(height))\r\n    }\r\n}\r\n\r\nfunction getLineHeightShift(doc) {\r\n    return (doc.getLineHeightFactor() - 1.15) * doc.getFontSize()\r\n}\r\n\r\nfunction drawTextInRect(doc, text, rect, verticalAlign, horizontalAlign, jsPDFTextOptions) {\r\n    var textArray = text.split(\"\\n\");\r\n    var linesCount = textArray.length;\r\n    var heightOfOneLine = calculateTextHeight(doc, textArray[0], doc.getFont(), {\r\n        wordWrapEnabled: false,\r\n        targetRectWidth: 1e9\r\n    });\r\n    var vAlign = null !== verticalAlign && void 0 !== verticalAlign ? verticalAlign : \"middle\";\r\n    var hAlign = null !== horizontalAlign && void 0 !== horizontalAlign ? horizontalAlign : \"left\";\r\n    var verticalAlignCoefficientsMap = {\r\n        top: 0,\r\n        middle: .5,\r\n        bottom: 1\r\n    };\r\n    var y = rect.y + rect.h * verticalAlignCoefficientsMap[vAlign] - heightOfOneLine * (linesCount - 1) * verticalAlignCoefficientsMap[vAlign] + getLineHeightShift(doc);\r\n    var x = rect.x + rect.w * {\r\n        left: 0,\r\n        center: .5,\r\n        right: 1\r\n    } [hAlign];\r\n    var textOptions = extend({\r\n        baseline: vAlign,\r\n        align: hAlign\r\n    }, jsPDFTextOptions);\r\n    doc.text(textArray.join(\"\\n\"), roundToThreeDecimals(x), roundToThreeDecimals(y), textOptions)\r\n}\r\n\r\nfunction drawCellBackground(doc, cell) {\r\n    if (isDefined(cell.backgroundColor)) {\r\n        trySetColor(doc, \"fill\", cell.backgroundColor);\r\n        drawRect(doc, cell._rect.x, cell._rect.y, cell._rect.w, cell._rect.h, \"F\")\r\n    }\r\n}\r\n\r\nfunction drawCellText(doc, cell, docStyles) {\r\n    if (isDefined(cell.text) && \"\" !== cell.text) {\r\n        var {\r\n            textColor: textColor,\r\n            font: font,\r\n            _rect: _rect,\r\n            padding: padding\r\n        } = cell;\r\n        setTextStyles(doc, {\r\n            textColor: textColor,\r\n            font: font\r\n        }, docStyles);\r\n        var textRect = {\r\n            x: _rect.x + padding.left,\r\n            y: _rect.y + padding.top,\r\n            w: _rect.w - (padding.left + padding.right),\r\n            h: _rect.h - (padding.top + padding.bottom)\r\n        };\r\n        if (isDefined(cell._textLeftOffset) || isDefined(cell._textTopOffset)) {\r\n            var _cell$_textLeftOffset, _cell$_textTopOffset;\r\n            textRect.x = textRect.x + (null !== (_cell$_textLeftOffset = cell._textLeftOffset) && void 0 !== _cell$_textLeftOffset ? _cell$_textLeftOffset : 0);\r\n            textRect.y = textRect.y + (null !== (_cell$_textTopOffset = cell._textTopOffset) && void 0 !== _cell$_textTopOffset ? _cell$_textTopOffset : 0);\r\n            doc.saveGraphicsState();\r\n            clipOutsideRectContent(doc, cell._rect.x, cell._rect.y, cell._rect.w, cell._rect.h)\r\n        }\r\n        drawTextInRect(doc, cell.text, textRect, cell.verticalAlign, cell.horizontalAlign, cell._internalTextOptions);\r\n        if (isDefined(cell._textLeftOffset) || isDefined(cell._textTopOffset)) {\r\n            doc.restoreGraphicsState()\r\n        }\r\n    }\r\n}\r\n\r\nfunction drawCellsLines(doc, cellsArray, docStyles) {\r\n    cellsArray.filter(cell => !isDefined(cell.borderColor)).forEach(cell => {\r\n        drawBorders(doc, cell._rect, cell, docStyles)\r\n    });\r\n    cellsArray.filter(cell => isDefined(cell.borderColor)).forEach(cell => {\r\n        drawBorders(doc, cell._rect, cell, docStyles)\r\n    })\r\n}\r\n\r\nfunction drawGridLines(doc, rect, options, docStyles) {\r\n    drawBorders(doc, rect, options, docStyles)\r\n}\r\n\r\nfunction drawBorders(doc, rect, _ref, docStyles) {\r\n    var {\r\n        borderWidth: borderWidth,\r\n        borderColor: borderColor,\r\n        drawLeftBorder: drawLeftBorder = true,\r\n        drawRightBorder: drawRightBorder = true,\r\n        drawTopBorder: drawTopBorder = true,\r\n        drawBottomBorder: drawBottomBorder = true\r\n    } = _ref;\r\n    if (!isDefined(rect)) {\r\n        throw \"rect is required\"\r\n    }\r\n    if (!drawLeftBorder && !drawRightBorder && !drawTopBorder && !drawBottomBorder) {\r\n        return\r\n    } else if (drawLeftBorder && drawRightBorder && drawTopBorder && drawBottomBorder) {\r\n        setLinesStyles(doc, {\r\n            borderWidth: borderWidth,\r\n            borderColor: borderColor\r\n        }, docStyles);\r\n        drawRect(doc, rect.x, rect.y, rect.w, rect.h)\r\n    } else {\r\n        setLinesStyles(doc, {\r\n            borderWidth: borderWidth,\r\n            borderColor: borderColor\r\n        }, docStyles);\r\n        if (drawTopBorder) {\r\n            drawLine(doc, rect.x, rect.y, rect.x + rect.w, rect.y)\r\n        }\r\n        if (drawLeftBorder) {\r\n            drawLine(doc, rect.x, rect.y, rect.x, rect.y + rect.h)\r\n        }\r\n        if (drawRightBorder) {\r\n            drawLine(doc, rect.x + rect.w, rect.y, rect.x + rect.w, rect.y + rect.h)\r\n        }\r\n        if (drawBottomBorder) {\r\n            drawLine(doc, rect.x, rect.y + rect.h, rect.x + rect.w, rect.y + rect.h)\r\n        }\r\n    }\r\n}\r\n\r\nfunction setTextStyles(doc, _ref2, docStyles) {\r\n    var {\r\n        textColor: textColor,\r\n        font: font\r\n    } = _ref2;\r\n    trySetColor(doc, \"text\", isDefined(textColor) ? textColor : docStyles.textColor);\r\n    var currentFont = isDefined(font) ? extend({}, docStyles.font, font) : docStyles.font;\r\n    var docFont = doc.getFont();\r\n    if (currentFont.name !== docFont.fontName || currentFont.style !== docFont.fontStyle || isDefined(currentFont.weight)) {\r\n        doc.setFont(currentFont.name, currentFont.style, currentFont.weight)\r\n    }\r\n    if (currentFont.size !== doc.getFontSize()) {\r\n        doc.setFontSize(currentFont.size)\r\n    }\r\n}\r\n\r\nfunction setLinesStyles(doc, _ref3, docStyles) {\r\n    var {\r\n        borderWidth: borderWidth,\r\n        borderColor: borderColor\r\n    } = _ref3;\r\n    var currentBorderWidth = isDefined(borderWidth) ? borderWidth : docStyles.borderWidth;\r\n    if (currentBorderWidth !== getDocBorderWidth(doc)) {\r\n        setDocBorderWidth(doc, toPdfUnit(doc, currentBorderWidth))\r\n    }\r\n    trySetColor(doc, \"draw\", isDefined(borderColor) ? borderColor : docStyles.borderColor)\r\n}\r\n\r\nfunction trySetColor(doc, target, color) {\r\n    var getterName = \"get\".concat(capitalizeFirstLetter(target), \"Color\");\r\n    var setterName = \"set\".concat(capitalizeFirstLetter(target), \"Color\");\r\n    var {\r\n        ch1: ch1 = color,\r\n        ch2: ch2,\r\n        ch3: ch3,\r\n        ch4: ch4\r\n    } = color;\r\n    var normalizedColor = doc.__private__.decodeColorString(doc.__private__.encodeColorString({\r\n        ch1: ch1,\r\n        ch2: ch2,\r\n        ch3: ch3,\r\n        ch4: ch4,\r\n        precision: \"text\" === target ? 3 : 2\r\n    }));\r\n    if (normalizedColor !== doc[getterName]() || \"fill\" === target) {\r\n        doc[setterName].apply(doc, [ch1, ch2, ch3, ch4].filter(item => void 0 !== item))\r\n    }\r\n}\r\n\r\nfunction getDocumentStyles(doc) {\r\n    var docFont = doc.getFont();\r\n    return {\r\n        borderWidth: getDocBorderWidth(doc),\r\n        borderColor: doc.getDrawColor(),\r\n        font: {\r\n            name: docFont.fontName,\r\n            style: docFont.fontStyle,\r\n            size: doc.getFontSize()\r\n        },\r\n        textColor: doc.getTextColor()\r\n    }\r\n}\r\n\r\nfunction setDocumentStyles(doc, styles) {\r\n    var {\r\n        borderWidth: borderWidth,\r\n        borderColor: borderColor,\r\n        font: font,\r\n        textColor: textColor\r\n    } = styles;\r\n    var docFont = doc.getFont();\r\n    if (docFont.fontName !== font.name || docFont.fontStyle !== font.style) {\r\n        doc.setFont(font.name, font.style, void 0)\r\n    }\r\n    var docFontSize = doc.getFontSize();\r\n    if (docFontSize !== font.size) {\r\n        doc.setFontSize(font.size)\r\n    }\r\n    if (getDocBorderWidth(doc) !== borderWidth) {\r\n        setDocBorderWidth(doc, borderWidth)\r\n    }\r\n    if (doc.getDrawColor() !== borderColor) {\r\n        doc.setDrawColor(borderColor)\r\n    }\r\n    if (doc.getTextColor() !== textColor) {\r\n        doc.setTextColor(textColor)\r\n    }\r\n}\r\n\r\nfunction addNewPage(doc) {\r\n    doc.addPage();\r\n    resetDocBorderWidth(doc)\r\n}\r\n\r\nfunction getDocBorderWidth(doc) {\r\n    var _doc$__borderWidth;\r\n    if (isDefined(doc.getLineWidth)) {\r\n        return doc.getLineWidth()\r\n    }\r\n    return null !== (_doc$__borderWidth = doc.__borderWidth) && void 0 !== _doc$__borderWidth ? _doc$__borderWidth : .200025\r\n}\r\n\r\nfunction setDocBorderWidth(doc, width) {\r\n    doc.setLineWidth(width);\r\n    if (!isDefined(doc.getLineWidth)) {\r\n        doc.__borderWidth = width\r\n    }\r\n}\r\n\r\nfunction resetDocBorderWidth(doc) {\r\n    if (!isDefined(doc.getLineWidth)) {\r\n        doc.__borderWidth = null\r\n    }\r\n}\r\n\r\nfunction clipOutsideRectContent(doc, x, y, w, h) {\r\n    doc.moveTo(roundToThreeDecimals(x), roundToThreeDecimals(y));\r\n    doc.lineTo(roundToThreeDecimals(x + w), roundToThreeDecimals(y));\r\n    doc.lineTo(roundToThreeDecimals(x + w), roundToThreeDecimals(y + h));\r\n    doc.lineTo(roundToThreeDecimals(x), roundToThreeDecimals(y + h));\r\n    doc.clip();\r\n    doc.discardPath()\r\n}\r\nexport {\r\n    drawCellsContent,\r\n    drawCellsLines,\r\n    drawGridLines,\r\n    getDocumentStyles,\r\n    setDocumentStyles,\r\n    drawTextInRect,\r\n    drawRect,\r\n    drawLine,\r\n    roundToThreeDecimals,\r\n    addNewPage\r\n};\r\n", "/**\r\n * DevExtreme (esm/exporter/jspdf/common/rows_spliting_utils/get_multipage_row_pages.js)\r\n * Version: 23.2.14\r\n * Build date: Wed Sep 10 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nvar isHeader = rect => \"header\" === (null === rect || void 0 === rect ? void 0 : rect.sourceCellInfo.gridCell.rowType);\r\nvar spitMultiPageRows = (rectsToPatch, isCurrentPageContainsOnlyHeader, firstRectYAdjustment, splitMultiPageRowFunc, checkIsFitToPageFunc) => {\r\n    var [newPageRects, remainPageRects] = splitMultiPageRowFunc(isCurrentPageContainsOnlyHeader, rectsToPatch);\r\n    var newPageRectsArray = [isCurrentPageContainsOnlyHeader ? newPageRects.map(rect => _extends({}, rect, {\r\n        y: firstRectYAdjustment\r\n    })) : newPageRects];\r\n    while (!checkIsFitToPageFunc(false, remainPageRects[0].h)) {\r\n        [newPageRects, remainPageRects] = splitMultiPageRowFunc(false, remainPageRects);\r\n        newPageRectsArray.push(newPageRects)\r\n    }\r\n    return [newPageRectsArray, remainPageRects]\r\n};\r\nvar patchRects = (rectsToSplit, rectsToPatch, remainPageRects) => {\r\n    rectsToPatch.forEach((rect, rectIndex) => {\r\n        rect.sourceCellInfo.text = remainPageRects[rectIndex].sourceCellInfo.text;\r\n        rect.h = remainPageRects[rectIndex].h\r\n    });\r\n    var untouchedRowIdx = rectsToSplit.indexOf(rectsToPatch[rectsToPatch.length - 1]) + 1;\r\n    if (untouchedRowIdx >= rectsToSplit.length) {\r\n        return\r\n    }\r\n    var delta = rectsToSplit[untouchedRowIdx].y - (rectsToPatch[0].y + remainPageRects[0].h);\r\n    for (var idx = untouchedRowIdx; idx < rectsToSplit.length; idx++) {\r\n        rectsToSplit[idx].y = rectsToSplit[idx].y - delta\r\n    }\r\n};\r\nexport var checkPageContainsOnlyHeader = (pageRects, isFirstPage) => isFirstPage && isHeader(pageRects[pageRects.length - 1]);\r\nexport var getMultiPageRowPages = (currentPageRects, rectsToSplit, isCurrentPageContainsOnlyHeader, splitMultiPageRowFunc, checkIsFitToPageFunc) => {\r\n    if (!splitMultiPageRowFunc) {\r\n        return []\r\n    }\r\n    var currentPageLastRect = currentPageRects[currentPageRects.length - 1];\r\n    var nextPageFirstRect = rectsToSplit[currentPageRects.length];\r\n    if (!nextPageFirstRect || isHeader(nextPageFirstRect)) {\r\n        return []\r\n    }\r\n    var isRectsFitsToPage = checkIsFitToPageFunc(isCurrentPageContainsOnlyHeader, nextPageFirstRect.h);\r\n    if (isRectsFitsToPage && !isCurrentPageContainsOnlyHeader) {\r\n        return []\r\n    }\r\n    var rectsToPatch = rectsToSplit.filter(_ref => {\r\n        var {\r\n            y: y\r\n        } = _ref;\r\n        return y === nextPageFirstRect.y\r\n    });\r\n    var firstRectYAdjustment = currentPageLastRect.y + currentPageLastRect.h;\r\n    var [multiPageRowPages, remainPageRects] = spitMultiPageRows(rectsToPatch, isCurrentPageContainsOnlyHeader, firstRectYAdjustment, splitMultiPageRowFunc, checkIsFitToPageFunc);\r\n    patchRects(rectsToSplit, rectsToPatch, remainPageRects);\r\n    return multiPageRowPages\r\n};\r\n", "/**\r\n * DevExtreme (esm/exporter/jspdf/common/rows_spliting_utils/create_on_split_multipage_row.js)\r\n * Version: 23.2.14\r\n * Build date: Wed Sep 10 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    getTextLines,\r\n    getTextDimensions,\r\n    calculateTextHeight\r\n} from \"../pdf_utils\";\r\n\r\nfunction createMultiCellRect(rect, text, marginTop) {\r\n    return _extends({}, rect, {\r\n        sourceCellInfo: _extends({}, rect.sourceCellInfo, {\r\n            text: text\r\n        }),\r\n        y: marginTop\r\n    })\r\n}\r\nexport var createOnSplitMultiPageRow = (doc, options, headerHeight, maxBottomRight) => (isFirstPage, pageRects) => {\r\n    var currentPageRects = [];\r\n    var nextPageRects = [];\r\n    var maxCurrentPageHeight = 0;\r\n    var maxNextPageHeight = 0;\r\n    pageRects.forEach(rect => {\r\n        var {\r\n            w: w,\r\n            sourceCellInfo: sourceCellInfo\r\n        } = rect;\r\n        var additionalHeight = !isFirstPage && options.repeatHeaders ? headerHeight : headerHeight + options.topLeft.y;\r\n        var heightOfOneLine = getTextDimensions(doc, sourceCellInfo.text, sourceCellInfo.font).h;\r\n        var paddingHeight = sourceCellInfo.padding.top + sourceCellInfo.padding.bottom;\r\n        var fullPageHeight = maxBottomRight.y - additionalHeight - paddingHeight - options.margin.top;\r\n        var possibleLinesCount = Math.floor(fullPageHeight / (heightOfOneLine * doc.getLineHeightFactor()));\r\n        var allLines = getTextLines(doc, sourceCellInfo.text, sourceCellInfo.font, {\r\n            wordWrapEnabled: sourceCellInfo.wordWrapEnabled,\r\n            targetRectWidth: w\r\n        });\r\n        if (possibleLinesCount < allLines.length) {\r\n            var currentPageText = allLines.slice(0, possibleLinesCount).join(\"\\n\");\r\n            var currentPageHeight = calculateTextHeight(doc, currentPageText, sourceCellInfo.font, {\r\n                wordWrapEnabled: sourceCellInfo.wordWrapEnabled,\r\n                targetRectWidth: w\r\n            });\r\n            maxCurrentPageHeight = Math.max(maxCurrentPageHeight, currentPageHeight + paddingHeight);\r\n            maxNextPageHeight = rect.h - currentPageHeight;\r\n            currentPageRects.push(createMultiCellRect(rect, currentPageText, options.margin.top));\r\n            nextPageRects.push(createMultiCellRect(rect, allLines.slice(possibleLinesCount).join(\"\\n\"), options.margin.top))\r\n        } else {\r\n            var _currentPageHeight = calculateTextHeight(doc, sourceCellInfo.text, sourceCellInfo.font, {\r\n                wordWrapEnabled: sourceCellInfo.wordWrapEnabled,\r\n                targetRectWidth: w\r\n            });\r\n            maxCurrentPageHeight = Math.max(maxCurrentPageHeight, _currentPageHeight + paddingHeight);\r\n            maxNextPageHeight = Math.max(maxNextPageHeight, _currentPageHeight + paddingHeight);\r\n            currentPageRects.push(createMultiCellRect(rect, sourceCellInfo.text, options.margin.top));\r\n            nextPageRects.push(createMultiCellRect(rect, \"\", options.margin.top))\r\n        }\r\n    });\r\n    currentPageRects.forEach(rect => rect.h = maxCurrentPageHeight);\r\n    nextPageRects.forEach(rect => rect.h = maxNextPageHeight);\r\n    return [currentPageRects, nextPageRects]\r\n};\r\n", "/**\r\n * DevExtreme (esm/exporter/jspdf/common/rows_splitting.js)\r\n * Version: 23.2.14\r\n * Build date: Wed Sep 10 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    isDefined\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    getPageWidth,\r\n    getPageHeight\r\n} from \"./pdf_utils\";\r\nimport {\r\n    roundToThreeDecimals\r\n} from \"./draw_utils\";\r\nimport {\r\n    getMultiPageRowPages,\r\n    checkPageContainsOnlyHeader\r\n} from \"./rows_spliting_utils/get_multipage_row_pages\";\r\nimport {\r\n    createOnSplitMultiPageRow\r\n} from \"./rows_spliting_utils/create_on_split_multipage_row\";\r\nvar COORDINATE_EPSILON = .001;\r\n\r\nfunction convertToCellsArray(rows) {\r\n    return [].concat.apply([], rows.map(rowInfo => rowInfo.cells.filter(cell => !isDefined(cell.pdfCell.isMerged)).map(cellInfo => _extends({}, cellInfo.pdfCell._rect, {\r\n        sourceCellInfo: _extends({}, cellInfo.pdfCell, {\r\n            gridCell: cellInfo.gridCell\r\n        })\r\n    }))))\r\n}\r\n\r\nfunction splitByPages(doc, rowsInfo, options, onSeparateRectHorizontally, onSeparateRectVertically) {\r\n    if (0 === rowsInfo.length) {\r\n        return [\r\n            []\r\n        ]\r\n    }\r\n    var maxBottomRight = {\r\n        x: getPageWidth(doc) - options.margin.right,\r\n        y: getPageHeight(doc) - options.margin.bottom\r\n    };\r\n    var headerRows = rowsInfo.filter(r => \"header\" === r.rowType);\r\n    var headerHeight = headerRows.reduce((accumulator, row) => accumulator + row.height, 0);\r\n    var verticallyPages = splitRectsByPages(convertToCellsArray(rowsInfo), options.margin.top, \"y\", \"h\", (isFirstPage, currentCoordinate) => {\r\n        var additionalHeight = !isFirstPage && options.repeatHeaders ? headerHeight : 0;\r\n        return roundToThreeDecimals(currentCoordinate + additionalHeight) <= roundToThreeDecimals(maxBottomRight.y)\r\n    }, (rect, currentPageMaxRectCoordinate, currentPageRects, rectsToSplit) => {\r\n        var args = {\r\n            sourceRect: rect,\r\n            topRect: {\r\n                x: rect.x,\r\n                y: rect.y,\r\n                w: rect.w,\r\n                h: currentPageMaxRectCoordinate - rect.y\r\n            },\r\n            bottomRect: {\r\n                x: rect.x,\r\n                y: currentPageMaxRectCoordinate,\r\n                w: rect.w,\r\n                h: rect.h - (currentPageMaxRectCoordinate - rect.y)\r\n            }\r\n        };\r\n        onSeparateRectVertically(args);\r\n        currentPageRects.push(args.topRect);\r\n        rectsToSplit.push(args.bottomRect)\r\n    }, createOnSplitMultiPageRow(doc, options, headerHeight, maxBottomRight));\r\n    if (options.repeatHeaders) {\r\n        for (var i = 1; i < verticallyPages.length; i++) {\r\n            verticallyPages[i].forEach(rect => rect.y += headerHeight);\r\n            var headerCells = convertToCellsArray(headerRows);\r\n            headerCells.forEach(cell => {\r\n                cell.y -= options.topLeft.y\r\n            });\r\n            verticallyPages[i] = [...headerCells, ...verticallyPages[i]]\r\n        }\r\n    }\r\n    var pageIndex = 0;\r\n    while (pageIndex < verticallyPages.length) {\r\n        var horizontallyPages = splitRectsByPages(verticallyPages[pageIndex], options.margin.left, \"x\", \"w\", (pagesLength, currentCoordinate) => roundToThreeDecimals(currentCoordinate) <= roundToThreeDecimals(maxBottomRight.x), (rect, currentPageMaxRectCoordinate, currentPageRects, rectsToSplit) => {\r\n            var args = {\r\n                sourceRect: rect,\r\n                leftRect: {\r\n                    x: rect.x,\r\n                    y: rect.y,\r\n                    w: currentPageMaxRectCoordinate - rect.x,\r\n                    h: rect.h\r\n                },\r\n                rightRect: {\r\n                    x: currentPageMaxRectCoordinate,\r\n                    y: rect.y,\r\n                    w: rect.w - (currentPageMaxRectCoordinate - rect.x),\r\n                    h: rect.h\r\n                }\r\n            };\r\n            onSeparateRectHorizontally(args);\r\n            currentPageRects.push(args.leftRect);\r\n            rectsToSplit.push(args.rightRect)\r\n        });\r\n        if (horizontallyPages.length > 1) {\r\n            verticallyPages.splice(pageIndex, 1, ...horizontallyPages);\r\n            pageIndex += horizontallyPages.length\r\n        } else {\r\n            pageIndex += 1\r\n        }\r\n    }\r\n    return verticallyPages.map(rects => rects.map(rect => _extends({}, rect.sourceCellInfo, {\r\n        _rect: rect\r\n    })))\r\n}\r\n\r\nfunction splitRectsByPages(rects, marginValue, coordinate, dimension, isFitToPage, onSeparateCallback, onSplitMultiPageRow) {\r\n    var pages = [];\r\n    var rectsToSplit = [...rects];\r\n    var isFitToPageForMultiPageRow = (isFirstPage, rectHeight) => isFitToPage(isFirstPage, rectHeight + marginValue);\r\n    var _loop = function() {\r\n        var currentPageMaxRectCoordinate = 0;\r\n        var currentPageRects = rectsToSplit.filter(rect => {\r\n            var currentRectCoordinate = rect[coordinate] + rect[dimension];\r\n            if (isFitToPage(0 === pages.length, currentRectCoordinate)) {\r\n                if (currentPageMaxRectCoordinate <= currentRectCoordinate) {\r\n                    currentPageMaxRectCoordinate = currentRectCoordinate\r\n                }\r\n                return true\r\n            } else {\r\n                return false\r\n            }\r\n        });\r\n        var isCurrentPageContainsOnlyHeader = checkPageContainsOnlyHeader(currentPageRects, 0 === pages.length);\r\n        var multiPageRowPages = getMultiPageRowPages(currentPageRects, rectsToSplit, isCurrentPageContainsOnlyHeader, onSplitMultiPageRow, isFitToPageForMultiPageRow);\r\n        var rectsToSeparate = rectsToSplit.filter(rect => {\r\n            var currentRectLeft = rect[coordinate];\r\n            var currentRectRight = rect[coordinate] + rect[dimension];\r\n            return currentPageMaxRectCoordinate - currentRectLeft > COORDINATE_EPSILON && currentRectRight - currentPageMaxRectCoordinate > COORDINATE_EPSILON\r\n        });\r\n        rectsToSeparate.forEach(rect => {\r\n            onSeparateCallback(rect, currentPageMaxRectCoordinate, currentPageRects, rectsToSplit);\r\n            var index = rectsToSplit.indexOf(rect);\r\n            if (-1 !== index) {\r\n                rectsToSplit.splice(index, 1)\r\n            }\r\n        });\r\n        currentPageRects.forEach(rect => {\r\n            var index = rectsToSplit.indexOf(rect);\r\n            if (-1 !== index) {\r\n                rectsToSplit.splice(index, 1)\r\n            }\r\n        });\r\n        rectsToSplit.forEach(rect => {\r\n            rect[coordinate] = isDefined(currentPageMaxRectCoordinate) ? rect[coordinate] - currentPageMaxRectCoordinate + marginValue : rect[coordinate]\r\n        });\r\n        var firstPageContainsHeaderAndMultiPageRow = isCurrentPageContainsOnlyHeader && multiPageRowPages.length > 0;\r\n        if (firstPageContainsHeaderAndMultiPageRow) {\r\n            var [firstPage, ...restOfPages] = multiPageRowPages;\r\n            pages.push([...currentPageRects, ...firstPage]);\r\n            pages.push(...restOfPages)\r\n        } else if (currentPageRects.length > 0) {\r\n            pages.push(currentPageRects);\r\n            pages.push(...multiPageRowPages)\r\n        } else if (multiPageRowPages.length > 0) {\r\n            pages.push(...multiPageRowPages);\r\n            pages.push(rectsToSplit)\r\n        } else {\r\n            pages.push(rectsToSplit);\r\n            return 1\r\n        }\r\n    };\r\n    while (rectsToSplit.length > 0) {\r\n        if (_loop()) {\r\n            break\r\n        }\r\n    }\r\n    return pages\r\n}\r\nexport {\r\n    splitByPages\r\n};\r\n", "/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.utils.js)\r\n * Version: 23.2.14\r\n * Build date: Wed Sep 10 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport gridCoreUtils from \"../../__internal/grids/grid_core/m_utils\";\r\nexport default gridCoreUtils;\r\n", "/**\r\n * DevExtreme (esm/exporter/common/export_load_panel.js)\r\n * Version: 23.2.14\r\n * Build date: Wed Sep 10 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport LoadPanel from \"../../ui/load_panel\";\r\nimport gridUtils from \"../../ui/grid_core/ui.grid_core.utils\";\r\nvar EXPORT_LOAD_PANEL_CLASS = \"dx-export-loadpanel\";\r\nclass ExportLoadPanel {\r\n    constructor(component, $targetElement, $container, options) {\r\n        this._$targetElement = $targetElement;\r\n        this._$container = $container;\r\n        this._loadPanel = component._createComponent($(\"<div>\").addClass(EXPORT_LOAD_PANEL_CLASS).appendTo(this._$container), LoadPanel, this.getOptions(options))\r\n    }\r\n    getDefaultOptions() {\r\n        return {\r\n            animation: null,\r\n            shading: false,\r\n            height: 90,\r\n            width: 200,\r\n            container: this._$container\r\n        }\r\n    }\r\n    getOptions(options) {\r\n        if (isDefined(options.text)) {\r\n            options.message = options.text\r\n        } else {\r\n            options.message = messageLocalization.format(\"dxDataGrid-exporting\")\r\n        }\r\n        return extend(this.getDefaultOptions(), options)\r\n    }\r\n    show() {\r\n        this._loadPanel.option(\"position\", gridUtils.calculateLoadPanelPosition(this._$targetElement));\r\n        this._loadPanel.show()\r\n    }\r\n    dispose() {\r\n        $(this._loadPanel.element()).remove();\r\n        delete this._loadPanel\r\n    }\r\n}\r\nexport {\r\n    ExportLoadPanel\r\n};\r\n", "/**\r\n * DevExtreme (esm/exporter/jspdf/common/export.js)\r\n * Version: 23.2.14\r\n * Build date: Wed Sep 10 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    isDefined\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    normalizeRowsInfo,\r\n    normalizeBoundaryValue\r\n} from \"./normalizeOptions\";\r\nimport {\r\n    initializeCellsWidth,\r\n    applyColSpans,\r\n    applyRowSpans,\r\n    applyBordersConfig,\r\n    calculateHeights,\r\n    calculateCoordinates,\r\n    calculateTableSize,\r\n    resizeFirstColumnByIndentLevel\r\n} from \"./row_utils\";\r\nimport {\r\n    updateRowsAndCellsHeights\r\n} from \"./height_updater\";\r\nimport {\r\n    generateRowsInfo,\r\n    getBaseTableStyle\r\n} from \"./rows_generator\";\r\nimport {\r\n    splitByPages\r\n} from \"./rows_splitting\";\r\nimport {\r\n    drawCellsContent,\r\n    drawCellsLines,\r\n    drawGridLines,\r\n    getDocumentStyles,\r\n    setDocumentStyles,\r\n    addNewPage\r\n} from \"./draw_utils\";\r\nimport {\r\n    applyRtl,\r\n    applyWordWrap,\r\n    toPdfUnit\r\n} from \"./pdf_utils\";\r\nimport messageLocalization from \"../../../localization/message\";\r\nimport {\r\n    ExportLoadPanel\r\n} from \"../../common/export_load_panel\";\r\nimport {\r\n    hasWindow\r\n} from \"../../../core/utils/window\";\r\n\r\nfunction _getFullOptions(options) {\r\n    var {\r\n        jsPDFDocument: jsPDFDocument\r\n    } = options;\r\n    var fullOptions = extend({}, options);\r\n    if (!isDefined(fullOptions.topLeft)) {\r\n        fullOptions.topLeft = {\r\n            x: 0,\r\n            y: 0\r\n        }\r\n    }\r\n    if (!isDefined(fullOptions.indent)) {\r\n        fullOptions.indent = 0\r\n    }\r\n    if (!isDefined(fullOptions.repeatHeaders)) {\r\n        fullOptions.repeatHeaders = true\r\n    }\r\n    if (!isDefined(fullOptions.margin)) {\r\n        fullOptions.margin = toPdfUnit(jsPDFDocument, 40)\r\n    }\r\n    fullOptions.margin = normalizeBoundaryValue(fullOptions.margin);\r\n    if (!Array.isArray(fullOptions.columnWidths)) {\r\n        fullOptions.columnWidths = []\r\n    }\r\n    if (!isDefined(fullOptions.loadPanel)) {\r\n        fullOptions.loadPanel = {}\r\n    }\r\n    if (!isDefined(fullOptions.loadPanel.enabled)) {\r\n        fullOptions.loadPanel.enabled = true\r\n    }\r\n    if (!isDefined(fullOptions.loadPanel.text)) {\r\n        fullOptions.loadPanel.text = messageLocalization.format(\"dxDataGrid-exporting\")\r\n    }\r\n    return fullOptions\r\n}\r\n\r\nfunction exportDataGrid(options) {\r\n    var _component$_getIntern;\r\n    var {\r\n        jsPDFDocument: jsPDFDocument,\r\n        component: component,\r\n        selectedRowsOnly: selectedRowsOnly,\r\n        loadPanel: loadPanel\r\n    } = options;\r\n    var internalComponent = (null === (_component$_getIntern = component._getInternalInstance) || void 0 === _component$_getIntern ? void 0 : _component$_getIntern.call(component)) || component;\r\n    var initialLoadPanelEnabledOption = internalComponent.option(\"loadPanel\") && internalComponent.option(\"loadPanel\").enabled;\r\n    if (initialLoadPanelEnabledOption) {\r\n        component.option(\"loadPanel.enabled\", false)\r\n    }\r\n    var exportLoadPanel;\r\n    if (loadPanel.enabled && hasWindow()) {\r\n        var rowsView = component.getView(\"rowsView\");\r\n        exportLoadPanel = new ExportLoadPanel(component, rowsView.element(), rowsView.element().parent(), loadPanel);\r\n        exportLoadPanel.show()\r\n    }\r\n    var dataProvider = component.getDataProvider(selectedRowsOnly);\r\n    return new Promise(resolve => {\r\n        dataProvider.ready().done(() => {\r\n            var _options$rowOptions, _options$rowOptions$h;\r\n            var rowsInfo = generateRowsInfo(jsPDFDocument, dataProvider, component, null === (_options$rowOptions = options.rowOptions) || void 0 === _options$rowOptions ? void 0 : null === (_options$rowOptions$h = _options$rowOptions.headerStyles) || void 0 === _options$rowOptions$h ? void 0 : _options$rowOptions$h.backgroundColor);\r\n            if (options.customizeCell) {\r\n                rowsInfo.forEach(rowInfo => rowInfo.cells.forEach(cellInfo => options.customizeCell(cellInfo)))\r\n            }\r\n            normalizeRowsInfo(rowsInfo);\r\n            initializeCellsWidth(jsPDFDocument, dataProvider, rowsInfo, options);\r\n            resizeFirstColumnByIndentLevel(rowsInfo, options);\r\n            applyColSpans(rowsInfo);\r\n            calculateHeights(jsPDFDocument, rowsInfo, options);\r\n            applyRowSpans(rowsInfo);\r\n            updateRowsAndCellsHeights(jsPDFDocument, rowsInfo);\r\n            calculateCoordinates(jsPDFDocument, rowsInfo, options);\r\n            applyBordersConfig(rowsInfo);\r\n            applyWordWrap(jsPDFDocument, rowsInfo);\r\n            var docStyles = getDocumentStyles(jsPDFDocument);\r\n            var rtlEnabled = !!component.option(\"rtlEnabled\");\r\n            var rectsByPages = splitByPages(jsPDFDocument, rowsInfo, options, _ref => {\r\n                var _sourceRect$sourceCel;\r\n                var {\r\n                    sourceRect: sourceRect,\r\n                    leftRect: leftRect,\r\n                    rightRect: rightRect\r\n                } = _ref;\r\n                var leftRectTextOptions = {};\r\n                var rightRectTextOptions = {};\r\n                var isTextNotEmpty = (null === (_sourceRect$sourceCel = sourceRect.sourceCellInfo.text) || void 0 === _sourceRect$sourceCel ? void 0 : _sourceRect$sourceCel.length) > 0;\r\n                if (isTextNotEmpty) {\r\n                    if (rtlEnabled) {\r\n                        var isTextWidthGreaterThanRect = jsPDFDocument.getTextWidth(sourceRect.sourceCellInfo.text) > leftRect.w;\r\n                        var isTextRightAlignment = !isDefined(sourceRect.sourceCellInfo.horizontalAlign) || \"right\" === sourceRect.sourceCellInfo.horizontalAlign;\r\n                        if (isTextWidthGreaterThanRect || !isTextRightAlignment) {\r\n                            var _sourceRect$sourceCel2, _sourceRect$sourceCel4, _sourceRect$sourceCel5;\r\n                            var rightRectTextOffset;\r\n                            var leftRectTextOffset;\r\n                            if (\"right\" === (null === (_sourceRect$sourceCel2 = sourceRect.sourceCellInfo) || void 0 === _sourceRect$sourceCel2 ? void 0 : _sourceRect$sourceCel2.horizontalAlign)) {\r\n                                var _sourceRect$sourceCel3;\r\n                                rightRectTextOffset = null !== (_sourceRect$sourceCel3 = sourceRect.sourceCellInfo._textLeftOffset) && void 0 !== _sourceRect$sourceCel3 ? _sourceRect$sourceCel3 : 0;\r\n                                leftRectTextOffset = rightRectTextOffset + leftRect.w\r\n                            } else if (\"center\" === (null === (_sourceRect$sourceCel4 = sourceRect.sourceCellInfo) || void 0 === _sourceRect$sourceCel4 ? void 0 : _sourceRect$sourceCel4.horizontalAlign)) {\r\n                                leftRectTextOffset = sourceRect.x + sourceRect.w - (rightRect.x + rightRect.w) + sourceRect.sourceCellInfo._rect.w / 2 - leftRect.w / 2;\r\n                                rightRectTextOffset = leftRectTextOffset - rightRect.w\r\n                            } else if (\"left\" === (null === (_sourceRect$sourceCel5 = sourceRect.sourceCellInfo) || void 0 === _sourceRect$sourceCel5 ? void 0 : _sourceRect$sourceCel5.horizontalAlign)) {\r\n                                leftRectTextOffset = sourceRect.x + sourceRect.w - (rightRect.x + rightRect.w);\r\n                                rightRectTextOffset = leftRectTextOffset - rightRect.w\r\n                            }\r\n                            leftRectTextOptions = _extends({}, {\r\n                                _textLeftOffset: rightRectTextOffset\r\n                            });\r\n                            rightRectTextOptions = _extends({}, {\r\n                                _textLeftOffset: leftRectTextOffset\r\n                            })\r\n                        } else {\r\n                            rightRectTextOptions = _extends({}, {\r\n                                text: \"\"\r\n                            })\r\n                        }\r\n                    } else {\r\n                        var _isTextWidthGreaterThanRect = jsPDFDocument.getTextWidth(sourceRect.sourceCellInfo.text) > leftRect.w;\r\n                        var isTextLeftAlignment = !isDefined(sourceRect.sourceCellInfo.horizontalAlign) || \"left\" === sourceRect.sourceCellInfo.horizontalAlign;\r\n                        if (_isTextWidthGreaterThanRect || !isTextLeftAlignment) {\r\n                            var _sourceRect$sourceCel6, _sourceRect$sourceCel8, _sourceRect$sourceCel10;\r\n                            var leftTextLeftOffset;\r\n                            var rightTextLeftOffset;\r\n                            if (\"left\" === (null === (_sourceRect$sourceCel6 = sourceRect.sourceCellInfo) || void 0 === _sourceRect$sourceCel6 ? void 0 : _sourceRect$sourceCel6.horizontalAlign)) {\r\n                                var _sourceRect$sourceCel7;\r\n                                leftTextLeftOffset = null !== (_sourceRect$sourceCel7 = sourceRect.sourceCellInfo._textLeftOffset) && void 0 !== _sourceRect$sourceCel7 ? _sourceRect$sourceCel7 : 0;\r\n                                rightTextLeftOffset = leftTextLeftOffset - leftRect.w\r\n                            } else if (\"center\" === (null === (_sourceRect$sourceCel8 = sourceRect.sourceCellInfo) || void 0 === _sourceRect$sourceCel8 ? void 0 : _sourceRect$sourceCel8.horizontalAlign)) {\r\n                                var _sourceRect$sourceCel9;\r\n                                var offset = null !== (_sourceRect$sourceCel9 = sourceRect.sourceCellInfo._textLeftOffset) && void 0 !== _sourceRect$sourceCel9 ? _sourceRect$sourceCel9 : 0;\r\n                                leftTextLeftOffset = offset + (sourceRect.x + sourceRect.w / 2) - (leftRect.x + leftRect.w / 2);\r\n                                rightTextLeftOffset = offset + (sourceRect.x + sourceRect.w / 2) - (rightRect.x + rightRect.w / 2)\r\n                            } else if (\"right\" === (null === (_sourceRect$sourceCel10 = sourceRect.sourceCellInfo) || void 0 === _sourceRect$sourceCel10 ? void 0 : _sourceRect$sourceCel10.horizontalAlign)) {\r\n                                leftTextLeftOffset = sourceRect.x + sourceRect.w - (leftRect.x + leftRect.w);\r\n                                rightTextLeftOffset = sourceRect.x + sourceRect.w - (rightRect.x + rightRect.w)\r\n                            }\r\n                            leftRectTextOptions = _extends({}, {\r\n                                _textLeftOffset: leftTextLeftOffset\r\n                            });\r\n                            rightRectTextOptions = _extends({}, {\r\n                                _textLeftOffset: rightTextLeftOffset\r\n                            })\r\n                        } else {\r\n                            rightRectTextOptions = _extends({}, {\r\n                                text: \"\"\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                leftRect.sourceCellInfo = _extends({}, sourceRect.sourceCellInfo, {\r\n                    debugSourceCellInfo: sourceRect.sourceCellInfo\r\n                }, leftRectTextOptions);\r\n                rightRect.sourceCellInfo = _extends({}, sourceRect.sourceCellInfo, {\r\n                    debugSourceCellInfo: sourceRect.sourceCellInfo\r\n                }, rightRectTextOptions)\r\n            }, _ref2 => {\r\n                var _sourceRect$sourceCel11;\r\n                var {\r\n                    sourceRect: sourceRect,\r\n                    topRect: topRect,\r\n                    bottomRect: bottomRect\r\n                } = _ref2;\r\n                var topRectTextOptions = {};\r\n                var bottomRectTextOptions = {};\r\n                var isTextNotEmpty = (null === (_sourceRect$sourceCel11 = sourceRect.sourceCellInfo.text) || void 0 === _sourceRect$sourceCel11 ? void 0 : _sourceRect$sourceCel11.length) > 0;\r\n                if (isTextNotEmpty) {\r\n                    var _sourceRect$sourceCel12;\r\n                    var isTextHeightGreaterThanRect = jsPDFDocument.getTextDimensions(sourceRect.sourceCellInfo.text).h > topRect.h;\r\n                    var isTextTopAlignment = \"top\" === (null === (_sourceRect$sourceCel12 = sourceRect.sourceCellInfo) || void 0 === _sourceRect$sourceCel12 ? void 0 : _sourceRect$sourceCel12.verticalAlign);\r\n                    if (isTextHeightGreaterThanRect || !isTextTopAlignment) {\r\n                        var _sourceRect$sourceCel13, _sourceRect$sourceCel15, _sourceRect$sourceCel17;\r\n                        var topTextTopOffset;\r\n                        var bottomTextTopOffset;\r\n                        if (\"top\" === (null === (_sourceRect$sourceCel13 = sourceRect.sourceCellInfo) || void 0 === _sourceRect$sourceCel13 ? void 0 : _sourceRect$sourceCel13.verticalAlign)) {\r\n                            var _sourceRect$sourceCel14;\r\n                            topTextTopOffset = null !== (_sourceRect$sourceCel14 = sourceRect.sourceCellInfo._textTopOffset) && void 0 !== _sourceRect$sourceCel14 ? _sourceRect$sourceCel14 : 0;\r\n                            bottomTextTopOffset = topTextTopOffset - topRect.h\r\n                        } else if (\"middle\" === (null === (_sourceRect$sourceCel15 = sourceRect.sourceCellInfo) || void 0 === _sourceRect$sourceCel15 ? void 0 : _sourceRect$sourceCel15.verticalAlign)) {\r\n                            var _sourceRect$sourceCel16;\r\n                            var offset = null !== (_sourceRect$sourceCel16 = sourceRect.sourceCellInfo._textTopOffset) && void 0 !== _sourceRect$sourceCel16 ? _sourceRect$sourceCel16 : 0;\r\n                            topTextTopOffset = offset + (sourceRect.y + sourceRect.h / 2) - (topRect.y + topRect.h / 2);\r\n                            bottomTextTopOffset = offset + (sourceRect.y + sourceRect.h / 2) - (bottomRect.y + bottomRect.h / 2)\r\n                        } else if (\"bottom\" === (null === (_sourceRect$sourceCel17 = sourceRect.sourceCellInfo) || void 0 === _sourceRect$sourceCel17 ? void 0 : _sourceRect$sourceCel17.verticalAlign)) {\r\n                            topTextTopOffset = sourceRect.y + sourceRect.h - (topRect.y + topRect.h);\r\n                            bottomTextTopOffset = sourceRect.y + sourceRect.h - (bottomRect.y + bottomRect.h)\r\n                        }\r\n                        topRectTextOptions = _extends({}, {\r\n                            _textTopOffset: topTextTopOffset\r\n                        });\r\n                        bottomRectTextOptions = _extends({}, {\r\n                            _textTopOffset: bottomTextTopOffset\r\n                        })\r\n                    } else {\r\n                        bottomRectTextOptions = _extends({}, {\r\n                            text: \"\"\r\n                        })\r\n                    }\r\n                }\r\n                topRect.sourceCellInfo = _extends({}, sourceRect.sourceCellInfo, {\r\n                    debugSourceCellInfo: sourceRect.sourceCellInfo\r\n                }, topRectTextOptions);\r\n                bottomRect.sourceCellInfo = _extends({}, sourceRect.sourceCellInfo, {\r\n                    debugSourceCellInfo: sourceRect.sourceCellInfo\r\n                }, bottomRectTextOptions)\r\n            });\r\n            if (rtlEnabled) {\r\n                applyRtl(jsPDFDocument, rectsByPages, options)\r\n            }\r\n            rectsByPages.forEach((pdfCellsInfo, index) => {\r\n                if (index > 0) {\r\n                    addNewPage(jsPDFDocument)\r\n                }\r\n                drawCellsContent(jsPDFDocument, options.customDrawCell, pdfCellsInfo, docStyles);\r\n                drawCellsLines(jsPDFDocument, pdfCellsInfo, docStyles);\r\n                var isEmptyPdfCellsInfoSpecified = isDefined(pdfCellsInfo) && 0 === pdfCellsInfo.length;\r\n                if (isEmptyPdfCellsInfoSpecified) {\r\n                    var tableRect = calculateTableSize(jsPDFDocument, pdfCellsInfo, options);\r\n                    var baseStyle = getBaseTableStyle();\r\n                    drawGridLines(jsPDFDocument, tableRect, baseStyle, docStyles)\r\n                }\r\n            });\r\n            setDocumentStyles(jsPDFDocument, docStyles);\r\n            resolve()\r\n        }).always(() => {\r\n            if (initialLoadPanelEnabledOption) {\r\n                component.option(\"loadPanel.enabled\", initialLoadPanelEnabledOption)\r\n            }\r\n            if (loadPanel.enabled && hasWindow()) {\r\n                exportLoadPanel.dispose()\r\n            }\r\n        })\r\n    })\r\n}\r\nexport var Export = {\r\n    getFullOptions: _getFullOptions,\r\n    export: exportDataGrid\r\n};\r\n", "/**\r\n * DevExtreme (esm/exporter/jspdf/export_data_grid.js)\r\n * Version: 23.2.14\r\n * Build date: Wed Sep 10 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isDefined,\r\n    isObject\r\n} from \"../../core/utils/type\";\r\nimport errors from \"../../core/errors\";\r\nimport {\r\n    Export\r\n} from \"./common/export\";\r\nvar HOW_TO_MIGRATE_ARTICLE = \"https://supportcenter.devexpress.com/ticket/details/t1077554\";\r\n\r\nfunction _getFullOptions(options) {\r\n    if (!(isDefined(options) && isObject(options))) {\r\n        throw Error('The \"exportDataGrid\" method requires a configuration object.')\r\n    }\r\n    if (!(isDefined(options.component) && isObject(options.component) && \"dxDataGrid\" === options.component.NAME)) {\r\n        throw Error('The \"component\" field must contain a DataGrid instance.')\r\n    }\r\n    if (!(isDefined(options.jsPDFDocument) && isObject(options.jsPDFDocument))) {\r\n        throw Error('The \"jsPDFDocument\" field must contain a jsPDF instance.')\r\n    }\r\n    if (isDefined(options.autoTableOptions)) {\r\n        errors.log(\"W0001\", \"Export\", \"autoTableOptions\", \"22.1\", \"You can migrate from exporting to PDF with the AutoTable plugin to a new export system. See the following topic for more information: \".concat(HOW_TO_MIGRATE_ARTICLE))\r\n    }\r\n    return Export.getFullOptions(options)\r\n}\r\n\r\nfunction exportDataGrid(options) {\r\n    return Export.export(_getFullOptions(options))\r\n}\r\nexport {\r\n    exportDataGrid\r\n};\r\n", "/**\r\n * DevExtreme (esm/exporter/jspdf/autotable/export.js)\r\n * Version: 23.2.14\r\n * Build date: Wed Sep 10 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isDate,\r\n    isDefined,\r\n    isObject,\r\n    isFunction,\r\n    isNumeric\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport dateLocalization from \"../../../localization/date\";\r\nimport numberLocalization from \"../../../localization/number\";\r\nimport messageLocalization from \"../../../localization/message\";\r\nimport {\r\n    ExportLoadPanel\r\n} from \"../../common/export_load_panel\";\r\nimport {\r\n    hasWindow\r\n} from \"../../../core/utils/window\";\r\nexport var Export = {\r\n    getFullOptions: function(options) {\r\n        var fullOptions = extend({}, options);\r\n        if (!(isDefined(fullOptions.jsPDFDocument) && isObject(fullOptions.jsPDFDocument))) {\r\n            throw Error('The \"jsPDFDocument\" field must contain a jsPDF instance.')\r\n        }\r\n        if (!(isDefined(fullOptions.jsPDFDocument.autoTable) && isFunction(fullOptions.jsPDFDocument.autoTable))) {\r\n            throw Error('The \"exportDataGrid\" method requires a autoTable plugin for jsPDF object.')\r\n        }\r\n        if (!isDefined(fullOptions.keepColumnWidths)) {\r\n            fullOptions.keepColumnWidths = true\r\n        }\r\n        if (!isDefined(fullOptions.autoTableOptions)) {\r\n            fullOptions.autoTableOptions = this._getDefaultAutoTableOptions()\r\n        } else {\r\n            if (!isObject(fullOptions.autoTableOptions)) {\r\n                throw Error('The \"autoTableOptions\" option must be of object type.')\r\n            }\r\n            fullOptions.autoTableOptions = extend(true, {}, this._getDefaultAutoTableOptions(), fullOptions.autoTableOptions)\r\n        }\r\n        if (!isDefined(fullOptions.loadPanel)) {\r\n            fullOptions.loadPanel = {}\r\n        }\r\n        if (!isDefined(fullOptions.loadPanel.enabled)) {\r\n            fullOptions.loadPanel.enabled = true\r\n        }\r\n        if (!isDefined(fullOptions.loadPanel.text)) {\r\n            fullOptions.loadPanel.text = messageLocalization.format(\"dxDataGrid-exporting\")\r\n        }\r\n        return fullOptions\r\n    },\r\n    _getDefaultAutoTableOptions: function() {\r\n        return {\r\n            theme: \"plain\",\r\n            tableLineColor: 149,\r\n            tableLineWidth: .1,\r\n            styles: {\r\n                textColor: 51,\r\n                lineColor: 149,\r\n                lineWidth: 0\r\n            },\r\n            columnStyles: {},\r\n            headStyles: {\r\n                fontStyle: \"normal\",\r\n                textColor: 149,\r\n                lineWidth: .1\r\n            },\r\n            bodyStyles: {\r\n                lineWidth: .1\r\n            },\r\n            head: [],\r\n            body: []\r\n        }\r\n    },\r\n    export: function(options) {\r\n        var _component$_getIntern;\r\n        var {\r\n            jsPDFDocument: jsPDFDocument,\r\n            autoTableOptions: autoTableOptions,\r\n            component: component,\r\n            customizeCell: customizeCell,\r\n            keepColumnWidths: keepColumnWidths,\r\n            selectedRowsOnly: selectedRowsOnly,\r\n            loadPanel: loadPanel\r\n        } = options;\r\n        var internalComponent = (null === (_component$_getIntern = component._getInternalInstance) || void 0 === _component$_getIntern ? void 0 : _component$_getIntern.call(component)) || component;\r\n        var initialLoadPanelEnabledOption = internalComponent.option(\"loadPanel\") && internalComponent.option(\"loadPanel\").enabled;\r\n        if (initialLoadPanelEnabledOption) {\r\n            component.option(\"loadPanel.enabled\", false)\r\n        }\r\n        var exportLoadPanel;\r\n        if (loadPanel.enabled && hasWindow()) {\r\n            var rowsView = component.getView(\"rowsView\");\r\n            exportLoadPanel = new ExportLoadPanel(component, rowsView.element(), rowsView.element().parent(), loadPanel);\r\n            exportLoadPanel.show()\r\n        }\r\n        var dataProvider = component.getDataProvider(selectedRowsOnly);\r\n        var wrapText = !!component.option(\"wordWrapEnabled\");\r\n        return new Promise(resolve => {\r\n            dataProvider.ready().done(() => {\r\n                var columns = dataProvider.getColumns();\r\n                var styles = dataProvider.getStyles();\r\n                var dataRowsCount = dataProvider.getRowsCount();\r\n                var headerRowCount = dataProvider.getHeaderRowCount();\r\n                var mergedCells = [];\r\n                if (keepColumnWidths) {\r\n                    var pdfColumnWidths = this._tryGetPdfColumnWidths(autoTableOptions.tableWidth, dataProvider.getColumnsWidths());\r\n                    if (isDefined(pdfColumnWidths) && isDefined(autoTableOptions.columnStyles)) {\r\n                        this._setColumnWidths(autoTableOptions.columnStyles, pdfColumnWidths)\r\n                    }\r\n                }\r\n                for (var rowIndex = 0; rowIndex < dataRowsCount; rowIndex++) {\r\n                    var row = [];\r\n                    for (var cellIndex = 0; cellIndex < columns.length; cellIndex++) {\r\n                        var {\r\n                            value: value,\r\n                            cellSourceData: gridCell\r\n                        } = dataProvider.getCellData(rowIndex, cellIndex, true);\r\n                        var cellStyle = styles[dataProvider.getStyleId(rowIndex, cellIndex)];\r\n                        var pdfCell = {\r\n                            content: this._getFormattedValue(value, cellStyle.format),\r\n                            styles: this._getPDFCellStyles(gridCell.rowType, columns[cellIndex].alignment, cellStyle, wrapText)\r\n                        };\r\n                        if (\"header\" === gridCell.rowType) {\r\n                            var mergedRange = this._tryGetMergeRange(rowIndex, cellIndex, mergedCells, dataProvider);\r\n                            if (mergedRange && mergedRange.rowSpan > 0) {\r\n                                pdfCell.rowSpan = mergedRange.rowSpan + 1\r\n                            }\r\n                            if (mergedRange && mergedRange.colSpan > 0) {\r\n                                pdfCell.colSpan = mergedRange.colSpan + 1\r\n                            }\r\n                            var isMergedCell = mergedCells[rowIndex] && mergedCells[rowIndex][cellIndex];\r\n                            if (!isMergedCell || pdfCell.rowSpan > 1 || pdfCell.colSpan > 1) {\r\n                                if (isFunction(customizeCell)) {\r\n                                    customizeCell({\r\n                                        gridCell: gridCell,\r\n                                        pdfCell: pdfCell\r\n                                    })\r\n                                }\r\n                                row.push(pdfCell)\r\n                            }\r\n                        } else if (\"group\" === gridCell.rowType && !isDefined(pdfCell.content) && 1 === row.length) {\r\n                            var _row$0$colSpan;\r\n                            row[0].colSpan = null !== (_row$0$colSpan = row[0].colSpan) && void 0 !== _row$0$colSpan ? _row$0$colSpan : 1;\r\n                            row[0].colSpan++\r\n                        } else {\r\n                            var _pdfCell$content;\r\n                            pdfCell.content = null !== (_pdfCell$content = pdfCell.content) && void 0 !== _pdfCell$content ? _pdfCell$content : \"\";\r\n                            if (isFunction(customizeCell)) {\r\n                                customizeCell({\r\n                                    gridCell: gridCell,\r\n                                    pdfCell: pdfCell\r\n                                })\r\n                            }\r\n                            row.push(pdfCell)\r\n                        }\r\n                    }\r\n                    if (rowIndex < headerRowCount) {\r\n                        autoTableOptions.head.push(row)\r\n                    } else {\r\n                        autoTableOptions.body.push(row)\r\n                    }\r\n                }\r\n                jsPDFDocument.autoTable(autoTableOptions);\r\n                resolve()\r\n            }).always(() => {\r\n                if (initialLoadPanelEnabledOption) {\r\n                    component.option(\"loadPanel.enabled\", initialLoadPanelEnabledOption)\r\n                }\r\n                if (loadPanel.enabled && hasWindow()) {\r\n                    exportLoadPanel.dispose()\r\n                }\r\n            })\r\n        })\r\n    },\r\n    _getFormattedValue: function(value, format) {\r\n        if (isDefined(format)) {\r\n            if (isDate(value)) {\r\n                return dateLocalization.format(value, format)\r\n            }\r\n            if (isNumeric(value)) {\r\n                return numberLocalization.format(value, format)\r\n            }\r\n        }\r\n        return value\r\n    },\r\n    _getPDFCellStyles: function(rowType, columnAlignment, cellStyle, wrapText) {\r\n        var {\r\n            alignment: cellAlignment,\r\n            bold: bold\r\n        } = cellStyle;\r\n        var align = \"header\" === rowType ? columnAlignment : cellAlignment;\r\n        var pdfCellStyle = {};\r\n        if (align) {\r\n            pdfCellStyle.halign = align\r\n        }\r\n        if (bold && \"header\" !== rowType) {\r\n            pdfCellStyle.fontStyle = \"bold\"\r\n        }\r\n        if (wrapText) {\r\n            pdfCellStyle.cellWidth = \"wrap\"\r\n        }\r\n        return pdfCellStyle\r\n    },\r\n    _tryGetMergeRange: function(rowIndex, cellIndex, mergedCells, dataProvider) {\r\n        if (!mergedCells[rowIndex] || !mergedCells[rowIndex][cellIndex]) {\r\n            var {\r\n                colspan: colspan,\r\n                rowspan: rowspan\r\n            } = dataProvider.getCellMerging(rowIndex, cellIndex);\r\n            if (colspan || rowspan) {\r\n                for (var i = rowIndex; i <= rowIndex + rowspan || 0; i++) {\r\n                    for (var j = cellIndex; j <= cellIndex + colspan || 0; j++) {\r\n                        if (!mergedCells[i]) {\r\n                            mergedCells[i] = []\r\n                        }\r\n                        mergedCells[i][j] = true\r\n                    }\r\n                }\r\n                return {\r\n                    rowSpan: rowspan,\r\n                    colSpan: colspan\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _tryGetPdfColumnWidths(autoTableWidth, columnWidths) {\r\n        if (isNumeric(autoTableWidth) && isDefined(columnWidths)) {\r\n            var tableWidth = columnWidths.reduce((a, b) => a + b, 0);\r\n            return columnWidths.map(columnWidth => autoTableWidth * columnWidth / tableWidth)\r\n        }\r\n    },\r\n    _setColumnWidths: function(autoTableColumnStyles, pdfColumnWidths) {\r\n        pdfColumnWidths.forEach((width, index) => {\r\n            autoTableColumnStyles[index] = autoTableColumnStyles[index] || {};\r\n            autoTableColumnStyles[index].cellWidth = width\r\n        })\r\n    }\r\n};\r\n", "/**\r\n * DevExtreme (esm/exporter/jspdf/autotable/export_data_grid.js)\r\n * Version: 23.2.14\r\n * Build date: Wed Sep 10 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isDefined,\r\n    isObject\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    Export\r\n} from \"./export\";\r\n\r\nfunction _getFullOptions(options) {\r\n    if (!(isDefined(options) && isObject(options))) {\r\n        throw Error('The \"exportDataGrid\" method requires a configuration object.')\r\n    }\r\n    if (!(isDefined(options.component) && isObject(options.component) && \"dxDataGrid\" === options.component.NAME)) {\r\n        throw Error('The \"component\" field must contain a DataGrid instance.')\r\n    }\r\n    if (!isDefined(options.selectedRowsOnly)) {\r\n        options.selectedRowsOnly = false\r\n    }\r\n    return Export.getFullOptions(options)\r\n}\r\n\r\nfunction exportDataGrid(options) {\r\n    return Export.export(_getFullOptions(options))\r\n}\r\nexport {\r\n    exportDataGrid\r\n};\r\n", "/**\r\n * DevExtreme (esm/exporter/jspdf/export_gantt.js)\r\n * Version: 23.2.14\r\n * Build date: Wed Sep 10 2025\r\n *\r\n * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nfunction exportGantt(options) {\r\n    var component = options.component;\r\n    return null === component || void 0 === component ? void 0 : component.exportToPdf(options)\r\n}\r\nexport {\r\n    exportGantt\r\n};\r\n"],
  "mappings": "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",
  "names": ["cellInfo", "_getFullOptions", "exportDataGrid", "Export", "_getFullOptions", "Export", "exportDataGrid"]
}
